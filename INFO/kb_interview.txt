KB

---Algorithms
*** Types of algorithms: 
*contstant - if/else. Simple algorithm w/o loops the fastest
*logarithmic - binary search
*linear - simple loop
*squere - double of loops
*triple - 3 nested loops

---Data structures---
***Linked List: looks like a train. A sequens of items, each item hasa refference to next item in a sequence.
An example of use is a browser history, when a person walks in the Internet it creates a history of pages. When user press the button backspace the previous item is fetched. The implementation of a linked list is a basic for such data structures as a Queue or Stack.

***Double Linked List: the same structure as Linked List but with a difference in refferences. Item of that list contains a refferences to Next and Prev items in a sequence.
An example is musical player when the user can listem previous song or the next one, also Undo-Redo functionality.

***Stack - works on a principle Last In Forst Out. Has two methods Push(add new item into steck to vertex) and pop (removes a top item from a stack), Peek returns a peek of a vertex of a stack. An example is reverce a word, Undo-Redo functionality.

***Queue - works on a principle First In First Out. After adding new element, the item goes to the end of queue and removing an item, removes and item from the top of queue.

***Circled linked list - very similar to a simple linked list with a difference that head has a refference to the tail item

***Circled double linked list - very similar to above data structure with a difference references. head refferences to the tail item and tail has a refference to head.

--- Types of sorting ---
***Comparable sort
The easyest algorithm of sorting. Just loop the array and search for the lowest element, then replace it with the first item of non-sorted part of array. If an array is short the algorithm works fine, if an array is large then the algorithm will fail.
Steps:
 - find min element in array
 - replace first element of array with the first element
 - again find an element and replace second element in array with the found
 - repeat operation untill the array is sorted

***Bubble sort
The most popular algorithm for education. On practice is slow. The idea is light-weight element will be on top and wighty elements will be at the bottom. 
An algorithm:
 - Each element of array is comparing with next one and if elem[i]>elem[i+1] the replacement will be  done.
 - Requires repeat steps 1...n-1 times (where n is a size of array)

***Shaking sort
Is one of the version of bubble sorting with one difference, bubble sort is moving in one direction from the top to the end. Here we need to sort first from the top to the bottom, then from the bottom to the top.
On practice it will be one while and within while will be 2 for lops one will go from the top to the bottom and second will go from the bottom to the top.

***Inserting sort
The idea is to take an element, find a position for an element and insert.
You unsorted array, take elements 1 and 2 sort them (if needs), then you array initially devided into two arrays.
Left one is sorted and the right one is unsorted.
Then, take each element from unsorted array and insert into sorted array depends on the value, every time the left one will a sorted array extended by 1 element untill the right one will be empty.

***Shell sorting
You need to get a size of step.
Example an array with the size 10
Just (10 / 2) D=5.
Then you need to compare elements with a step, 0 => 5, 1=>6,2=>7,3=>8,4=>9.
If 0 elem is more then 5th, replace those places.
After sorting groupt with a step 5, then find another step.
5/2 = 2, then you need to work step=2.
Sort element 0,2,4,6,8 then sort array indexes 1,3,5,7,9
Then final step 2/2. D=1 here apply Insert Sort.

***Quick sort
You need to choose a pivot(стержень), ussually it is the last element in array.
Then you need compare each element with the pivot and set all element lower than pivot on the left side and bigger elements on the right side.


--- C# & .NET---
*** types
bool - true/false
byte - contains integer 0-255, size 1 byte
sbyte- range -128 to 127, size 1 bytes
ushort- range 0 to 65535, size 2 bytes (2^16)
int - range (-1)*(2^31) to 2^31, size 2 bytes, type Int32
uIint - from 0 to (2^32), size 4 bytes
long - (-1)*(2^63) to 2^63, size 8 bytes, type Int64
ulong - 0 to 2^64, size 8bytes
float - from -3.4*(10^38) to 3.4*(10^38), size 4 bytes, type Single
double - +/-5*(10^324) to +/-1.7*(10^308), size 8 bytes, type System.Double
decimal - type System.Decimal range from -7.9*10^28 to 7.9*10^28 / 10^0-28, size 16bytes
char - one symbol in Unicode, size 2 bytes
string - a set of chars in Unicode, size is int, so the size of string is int.MaxNumber. 2GB limit in CLR
object - 4 bytes in x32 and 8bytes in x64

***Difference between String and string
String and string are the same, both are from class System.String.
string is just an allias. it is just a convetion.
For having a variable you need to use string, for using specific methods like Concat, use String.Concat.

*** string and StringBuilder - when we are changing the string type .NET creates new string in memory. StringBuilder is a dynamic string

***System architcture
x86 is an architecture of a processor uses 32bytes
x64 uses 64bytes
x86 works with max 4GB of memory
x64 works with max 16TB of memory

*** Decimal or Double
Decimal is very big type, you should car when use.
float -for simple fractional types
double - for advanced fractional types.
Decimal is using mostly for advanced calculations in financial 

***Implicit and Explicit conversions
int a = 5;
byte b = a (implicit)
byte c = (byte)a (explicit)
Sometimes is possible to loose some data.
Example byte b = 33+600;
We loose a data because the result is 121.

try
{
    int a = 33;
    int b = 600;
    byte c = checked((byte)(a + b));
    Console.WriteLine(c);
}
catch (OverflowException ex)
{
    Console.WriteLine(ex.Message);
}

*** C# operations
+,-,*,/,%,++,--
logical operations:
-&AND both 1 is 1 example 010 & 101 = 000
-|OR one or both 1 is 1 example 010 & 101 =111
-^XOR only one 1 is 1, 11 is 0, 00 is 0. 010^101=111
-~ inversion 101 = 010
-<< x<<y. 4<<1 = 8, 100<<1=1000
->> x>>y. 16>>1=8, 10000>>1=1000

*** Arrays
An array is a set if values of one type.
Declaration is int[] nums = new int[4]; 
If you want to access the 5th element it returns IndexOutOfRangeException. An alternative way of declaration is 
int[] nums3 = { 1, 2, 3, 5 };

***A set of operations, that returns nothhing (void) called a procedure.
Unlike procedures, functions return a value.

*** Reference and value types. Value type stored in stack, reference type in managed memory heap. 
int, char, long... are struct types and it is a value type.
string, delegates,arrays are classes and it is a refference type
You have two types of memory locations Stack and Heap.
Value types are stored in stack, in terms of ref types you store in stack just a pointer of your reference variable to the address in heap.

*** passing by value and by refference
You are able to pass a paramenter into a method by a value and by a refference.
1. Value type passing from Main into a method as a parameter. The result is the value will not be changed, because the method have another scope
2. Refference type passing from Main to a method as a parameter, you are passing a memory address and as a result the value of a ref type will be changed, cause within Main and within the method there are in both cases one memory place.

---ref means that the parameter has a value on it before going into the function. The called function can read and or change the value any time. The parameter goes in, then comes out.In case of refference types passing by refference into a method, it is possible to change the object but not override, in case of ref it is possible to use new object and on the starting point it will be overriden. When passing struct by ref keyword then it modifies it.
---out means that the parameter has no official value before going into the function. The called function must initialize it. The parameter only goes out.

***Not required and named parameters
static int OptionalParam(int x, int y, int z=5, int s=4)
OptionalParam(x:2, y:3);-Named parameters

***Recursion functions
static int Factorial(int x)
{
    if (x == 0)
    {
        return 1;
    }
    else
    {
        return x * Factorial(x - 1);
    }
}

***Enum
Enum is a set of named constants of integer type(byte,int,long,short)
Possible to pass as a parameter
static void MathOp(double x, double y, Operation op)

***Struct
Is a very similar to a class, can have a constructor, but only with a parameters.
During initialization is possible to call a constructor w/o parameters, it will just initialize all fields by default types values. Struct is a value type, so a memory allocation is a little bit different then in class.
Struct is better to use for a small data types cause it impacts the performance. When we pass a value type we pass the entire object in stack. In case of class we pass only an address in a memory and it is much faster.
For a small object that contains several int fields it ok to use a strunc, but for bigger better to use a class.
If a struct contais a string (refference type), it will also create a copy.

***Exception handling
try, catch, finally
When an exception was thrown the CLR is looking for a catch block and if it is not found then it shown unhandled exception. Derived exceptions will be handled at first, then common exception.
For throwing exception uses keyword throw. For instance when you are going something to check on another service.
You can throw an exception by your own.

***OOP
Class is a reference type, can have a constructor with or w/o parameters.
Partial class is a class whci can be declared in several files.
public - visible from any place in code
private - visible only in that place
protected - visible within the class an for derived clases
internal - visible only within onle assembly

*Const - can be initialized one time before complicalion
const double pi=3.14

*readonly fields - very similar to constants, you can't reassign it twice, but it can be initialized also from the contstructor

*properties - provides easy access to class fields, and it is a demonstration of incapsulation principle.

*static - methods or fields will be visible for the entire class
static constructor - constructor works only when call a static property or when create an object.
static class - class which contains only static properties of static methods 

*** Encapsulation - principle of OOP. The main idea is hiding details of implementation. In terms of C#, should be private field and public properties should be used for accessing. Additional logic should be used for validation.

*** Inheritance - principle of OOP. The main idea is to extend logic of basic class. In C# multi inheritance of class is forbidden.
Allowed to use multi inheritance of interfaces.

*** sealed keyword, means that the class is hidden for inheritance

*** base keyword is about access to a base construction from a derived class

*** Polymorphism - principle of OOP. The main idea is to use method from from basic class with override implementation in inherited class. Key words virtual and override.
virtual: indicates that a method may be overridden by an inheritor
override: overrides the functionality of a virtual function in a base class, providing different functionality.
new: to hide the functionality of base class
public class A
{
   public virtual void One();
   public void Two();
}
public class B : A
{
   public override void One();
   public new void Two();
}
B b = new B();
A a = b as A;
a.One(); // Calls implementation in B
a.Two(); // Calls implementation in A
b.One(); // Calls implementation in B
b.Two(); // Calls implementation in B

***base, is possible to use for accessing the base implementation of a method

***sealed, is possible to use to forbid the overriding

***abstract class- it is very similat to regular class but with a difference that you can't create an instance.
it provides a base functionality for an inheritors

***abstract methods, they have a signature but don't have a body, and derived class should implement the body according to the signature, using override

***System.Object








*** GAC - it is a folder within Windows folder. So the GAC must be a place to store code libraries so they're accessible to all applications running on the machine.
global - applies to the entire machine
assembly - what .NET calls its code-libraries (DLLs)
cache - a place to store things for faster/common access 
******HASH TABLE ****
*** GC - in .NET there are two types of value value type and reference type. In case of value type after finishing the method value type will be automatically clean from the stack.
In case of memory heap objects will also have a place in stack but just for references to a place of memory in a heap. So, when method is finished stack will be empty but place in heap will
have a data and for clearing this data .NET created GC. It will detected that this place doesn't have a reference and will clean it. 
There 3 generation of GC (0,1,2). For 0 gen. - new objects which have never been detected by GC, for 1 - objects that GC detected once, for 2 - objects that were detected 1 and more times.
GC will be executed when the program is running out of memory and in some time.


*** var & dynamic
var -  is implicit type. The type of variable will be determined from assigned value by compiler in a runtime.
dynamic - is a dynamic type that that identifying during execution via DLR. Dynamic type can change the type during the program execution.
		dynamic int1 = 1;
		dynamic int2 = 2;
		dynamic result = int1 + int2;
		The result will be 3.
So, you can declare int + string as a dynamic type. It shouldn't compile, but it will. And during execution it will fail.

*** ExpandoObject
In DLR (dynamic lang runtime) we have a namespace System.Dynamic and class ExpandoObject. It can allow to create an object similar to th eobjects in JS.
So we can create an object and create a fields of this object w/o declaration before.
dynamic viewbag = new System.Dynamic.ExpandoObject();
viewbag.Name = "Tom";
viewbag.Age = 46;
*** DynamicObject - it works in a similar way as an ExpandoObject. It has different virtual method that need to be override. It needs for preparation method for managing members of the class.
You can create your our logic for creating fields with additional validation.


*** Generics
System.Collections.ArrayList array = new System.Collections.ArrayList();
array.Add(x);
x can be int, string, class. All items has object types.
Instead we can use List<T>, it is a generic type. So it will be one class with one logic but can be done for different types.
You can provide your regulations for class T
class Bank<T> where T : Client, Account;;;class Bank<T> where T : struct;;;class Bank<T> where T : class;;;class Bank<T> where T : new()
It is possible to have a generic method in not generic class.

*** Extension method - it is a specific method to extend one class that can be declared in another file and second class.Method should be static.
Example public static void ExtMethod(this Class1 s, int methodparam1,string methodparam2)

*** Delegate - is a pointer to method.
delegate int Operation(int x, int y);
Operation del = new Operation(Add); 
int result = del.Invoke(4,5);
private static int Add(int x, int y) { return x+y; }

*** Event - mechanism for callback.Can be more then one subscriber. public event AccountStateHandler Added;  account.Added += Show_Message;

*** Anonymous methods - method w/o declaration and for event can be used only body of that method.

*** Lambda expressions - is a simple declaration of anonymous methods. It has a special syntax (parameters)=>expression
message GetMessage = () => { Console.WriteLine("some text"); };

*** Indexator - they allow to index objects and use them as an array. It works in a similar way as getter/setter. An example can be class Book and class Library.

*** IEnumerable & IEnumerator - if you want to loop your collection in foreach you should use them. Inherit your class from IEnumerable
IEnumerator IEnumerable.GetEnumerator(){return books.GetEnumerator();} And you can use it in foreach.

*** yeald -is a named enumerator or iterator. As an example can be used next construction IEnumerator IEnumerable.GetEnumerator(){for (int i = 0; i < books.Length; i++){yield return books[i];}}.
Each time during execution yeald is storing current position of item, and next time will be executed from the stored position. 

*** Serialization - is a process of transforming object to the byte flow. Desirialization is an opposite process. You should mark your class as [Serializable], if you want to exclude some fields
use [NonSerialized]. It can be serialization to binary,SOAP,XML,JSON format.BinaryFormatter,SoapFormatter,XmlSerializer.
BinaryFormatter formatter = new BinaryFormatter();   ->  formatter.Serialize(fs, person);



*** Finalizers - GC is a very good mechanism to work with memory cleaning. But sometimes some objects can use unmanaged resourses NetWork Connections or descriptors. So, GC doesn't know how to manage such cases
For that purpose we need to use finilizers. It is like a destructor in C++,  ~Person(). When GC is going to clean an object he will call finilizers first. Finalize method is by default in each class.
IDisposible - it has an interface with one method Dispose. It needs if we want to raise cleaning immediately in code we can use a construction using (Person p = new Person()){}
Disposible pattern - define a boolian variable  private bool IsDisposed = false;  and then override method Dispose also pass boolian variable to the method. 
If a variable on a class level is false and variable on method level is true then free managed resources and then call base.Dispose(disposing)

*** Reflection - is an ability of a program to work with metadata of the class in runtime. So, via this we can obtain an info about fields methods, properties.
You can load and run a method from assembly in runtime, even private method. But it has a negative side it decrease a performance.

*** Multithreading - is an ability work with several threads and execute different tasks independently. In .NET we have class Thread which is using for creating a Threads.
Each thread has his own priority from enumeration ThreadPriority it needs for CLR. For creation Thread w/o parameters is using class ThreadStart, syntax  Thread myThread = new Thread(new ThreadStart(Count));myThread.Start();
If you want to create a thread with parameters you should use ParameterizedThreadStart works in a similar way with the one difference that 1. you have a method with params. and 2. you should pass the parameter to Start main.
But thread start is type unsafe, means that we can pass over any parameter. For this purpose is better to create a class and pass params to constructor and call method w/o params.

*** Sharing resourses beetwen threads - if several threads are using shared variable we need  to use lock keyword for synchronizing. So, just put within the block lock block some code that you want to be executed within one thread.
lock (locker){ //some code ...}. Create an object just for locking it will provide a monopoly usage of code within lock. On a low level it is a use of System.Threading.Monitor.
Same method can be rewrite  Monitor.Enter(locker);try{ //some methods;}finally{Monitor.Exit(locker);}

*** Mutex - it is also an option for synchronizing. Should be created static Mutex mutexObj = new Mutex() and then use methods from this class WaitOne() and ReleaseMutex().
WaitOne - will stop thread execution until will be mutex object will get then when mutex doesn't need will be executed method ReleaseMutex. The best side of mutex is that we can use it not only within one thread
but also between processes. As an example will be creation an app. which can be run once.

*** Semafor - is also an option for synchronizing. It can restrict an access for a particular amount of objects. For implementation you should declare a semafor within the class.
static Semaphore sem = new Semaphore(3, 3), first parameter amount of objects that can use semaphore and second one is max amount of objects.It has 2 methods sem.WaitOne() and sem.Release().

*** TPL - from .NET 4.0 is recommended to use TPL instead of manuall creation a threads. The main item is class Task from System.Threading.Tasks.


------------------------------------------------------------------------------------------------------------------------------------------
--- Entity Framework
------------------------------------------------------------------------------------------------------------------------------------------

------------------------------------------------------------------------------------------------------------------------------------------
--- Patterns
------------------------------------------------------------------------------------------------------------------------------------------
*** What is that?
*** Anty-patterns?
*** Behavioural, Structural, Generating patterns?	
*** 
------------------------------------------------------------------------------------------------------------------------------------------
--- Solid, IOC, DI
------------------------------------------------------------------------------------------------------------------------------------------
*** SOLID principles
*** DI containers
*** Ninject
------------------------------------------------------------------------------------------------------------------------------------------
--- Unit tests
------------------------------------------------------------------------------------------------------------------------------------------
*** Mock & Stabs
*** Moq frameworks
------------------------------------------------------------------------------------------------------------------------------------------
---	ASP.NET WEBFORMS
------------------------------------------------------------------------------------------------------------------------------------------
*** Page lifecycle.
*** Global asax
*** Handlers and Modules
*** ViewState how to save object?
*** Caching
*** Postback
------------------------------------------------------------------------------------------------------------------------------------------
---	ASP.NET MVC
------------------------------------------------------------------------------------------------------------------------------------------
*** Page life cycle
*** MVC & MVP
*** ViewData, ViewBag *** dynamic, TempData
*** Filters
*** Validation
*** MVC async function
------------------------------------------------------------------------------------------------------------------------------------------
---	ASP.NET WebApi
------------------------------------------------------------------------------------------------------------------------------------------
*** What is it?
*** REST
*** GET, PUT, POST, DELETE
*** 
------------------------------------------------------------------------------------------------------------------------------------------
--- WCF
*** WCF service.
------------------------------------------------------------------------------------------------------------------------------------------
*** ABC?
*** Difference with WebService
------------------------------------------------------------------------------------------------------------------------------------------
--- SQL
------------------------------------------------------------------------------------------------------------------------------------------
*** indexes clustered and non-clusterd
*** syntacsys insert, update, select, delete
*** Difference clustered index with primary key?
------------------------------------------------------------------------------------------------------------------------------------------
--- JavaScript & jQuery
------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------
--- Html & XML & CSS
------------------------------------------------------------------------------------------------------------------------------------------
*** Html 5.
*** CSS2 vs CSS3.
*** 
------------------------------------------------------------------------------------------------------------------------------------------
--- Source Controls
------------------------------------------------------------------------------------------------------------------------------------------
*** GIT commans
*** Difference GIT with SVN
------------------------------------------------------------------------------------------------------------------------------------------
--- Sitecore
------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------
---	General
------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------
